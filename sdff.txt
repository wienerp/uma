import java.util.LinkedList;
public class AVL TreeDeletion
{
private class QueueNode
{
AVL TreeNode treeNode;
int level;
Queue Node(AVL TreeNode treeNode,int level)
{
this.treeNode=treeNode;
this.level=level;
}
}
private class AVL TreeNode
{
int data;
AVL TreeNode left;
AVL TreeNode right;
int height;
AVL TreeNode(int data)
{
this.data=data;
this.height=1;
}
}
AVL TreeNode root;
AVL TreeDeletion()
{
this.root=new AVL TreeNode(9);
}
AVL TreeDeletion(int rootValue)
{
this.root=new AVL TreeNode(rootValue);
}
int getHeight(AVL TreeNode node)
{
if(node==null)
rteturn 0;
return node.height;
}
void updateHeight(AVL TreeNode node)
{
if(node==null)
return;
node.height=Math.max(getHeight(node.left),getHeight(node.right))+1;
}
AVL TreeNode rotateRight((AVL TreeNode node)
{
if(node==null)
return node;
AVL TreeNode beta=node.left;
AVL TreeNode t2=beta.right;
beta.right=node;
node.left=t2;
updateHeight(node);
updateHeight((beta);
return beta;
}
AVL TreeNode rotateLeft(AVL TreeNode node)
{
if(node==null)
return node;
AVL TreeNode beta=node.right;
AVL  TreeNode t2=beta.left;
beta.left=node;
node.right=t2;
updateHeight(node);
updateHeight(beta);
return beta;
}
int getBalance(AVL TreeNode node)
{
if(node==null)
{
return 0;
}
int balance;
balance=getHeight(node.left)-getHeight(node.right);
return balance;
}
int getMin Value(AVL TreeNode node)
{
if(node==null)
return integer.MIN_VALUE;
if((node.left==null)
return node.data;
return getMin Value(node.left);
}
private AVL TreeNode delete(AVL TreeNode node,int key)
{
if(node==null)
return null;
if(key<node.data)
{
node.left=delete(node.left.key);
}
else if (key>node.data)
{
node.right=delete(node.right,key);
}
else
{
if(node.left==null)
{
node=node.right;
}
else if(node.right==null)
{
node=node.left;
}
else
{
int inorderSuccessorValue=getMin Value(node.right);
node.data=inorderSuccessorValue;
node.right=delete(node.right,inorderSuccessorValue);
}
}
if(node==null)
{
return null;
}
updateHeight(node);
int balance=getBalance(node);
if(balance>1)
{
if(getBalance(node.left)>=0
{
node=rotateRight(node);
}
else
{
node.left=rotateLeft(node.left);
node=rotateRight(node);
}
}
elseif(balance<-1)
{
if(getBalance(node.right)<=0)
{
node=rotateLeft(node);
}
else{
node.right=rotateRight(node.right);
node=rotateLeft(node);
}
}
return node;
}
private AVL TreeNode insert(AVL TreeNode nodeint key)
{
if(node==null)
{
return new AVL TreeNode(key);
}
if(key<node.data)
{
node.left=insert(node.left,key);
}
elseif(key>node.data)
{
node.right=insert(node.right,key);
}
else
{
return node;
}
updateHeight(node);
int balance=getBalance(node);
if(balance>1)
{
if(key<node.left.data)
{
node=rotateRight(node);
}
else
{
node.left=rotateLeft(node.left);
node=rotateRight(node);
}
}
elseif(balance<-1)
{
if(key>node.right.data)
{
no=rotateLeft(node);
}
else
{
node.right=rotateRight(node.right);
node=rotateLeft(no);
}
}
return node;
}
public void insert(int key)
{
root=insert(thi.root,key)
return;
}
public void delete(iny key)
root=delete(this.root,key);
return;
}
public void print TreeLevelOrder()
{
if(root==null)
return;
LinkedList queue=new LinkedList();
queue.add(new queue Node(root,0));
int maxLevel visited=-1;
while(!queue.isEmpty())
{
QueueNode currentNode=(QueueNode)queue.remove();
if(currentNode.level>maxLevel visited)
{
maxLevel visited=currentNode.level;
System.out.print('\n level"+currentNode.level+"node:");
}
if(currentNode.treeNode.left!=null)
{
queue.add(new QueueNode(currentNode.treeNode.left,currentNode.level+1));
}
if(currentNode.treeNode.right!=null)
{
queue.add(new QueueNode(currentNode.treeNode.right,currentNode.level+1));
}
}
}
public static void main(String args[])
{
AVL TreeDeletion tree=new AVL Deletion(0);
tree.insert(1);
tree.insert(2);
tree.insert(3);
tree.insert(4);
tree.insert(6);
tree.insert(50;
System.out.print("AVL tree before deleting any key");
tree.print TreeLevelOrder();
tree.delete(1);
System.out.print("\n\n AVL tree after deleting key with value 1");
tree.print TreeLevelOrder();
}
}


